#!/usr/bin/env zsh

dir=$(dirname $0)

source "$dir"/config

if pgrep -F "$panel_pid_file" > /dev/null 2>&1; then
  echo 'The panel is already running.' >&2
  exit 1
fi

# clean up PID file
trap 'trap - TERM; : >! "$panel_pid_file"; kill 0' INT TERM QUIT EXIT

# Reload bar with updated config
trap ': >! "$panel_pid_file"; pkill -P $$; exec "$(readlink -f "$0")"' USR1

[ -e "$panel_fifo" ] && rm -f "$panel_fifo"
mkfifo "$panel_fifo"

get_workspace() {
  echo "W$(bspc query -T -d "$1" | jq -r '.name')"
}

get_active_window() {
  echo "A$(bspc query -T -n focused | jq -r '.client.className' | sed -s 's/-/ /g')"
}

get_volume() {
  echo "V$(amixer get Master | grep 'Front Left: Playback')"
}

get_vpn_status() {
  echo "N$(vpn-connect -s)"
}

# music status
# Mopidy's MPD interface doesn't support channels, so we can't use `mpc subscribe`
# to listen for events. The next best thing is using `mpc idleloop` and query for
# the status, which is much better than polling.
mpc idleloop player | while read _; do
  echo "M$(mpc status 2> /dev/null | tr '\n' '|')"
done > "$panel_fifo" &

gpmdp_playback=~/.config/Google\ Play\ Music\ Desktop\ Player/json_store/playback.json
inotifywait -qm -e close_write --format '%w' "$gpmdp_playback" | while read -r file; do
  echo "G$(cat $file | jq -c 'del(.songLyrics)')"
done > "$panel_fifo" &

# bspwm desktop events
bspc subscribe desktop_focus | while read _ _ desktop_id; do
  get_workspace "$desktop_id"
  # If we switch to a desktop without a window we want the current window name
  # to reflect that
  get_active_window
done > "$panel_fifo" &

get_workspace "$(bspc query -D -n focused)" > "$panel_fifo" &

# active window
bspc subscribe node_focus node_remove | while read _; do
  get_active_window
done > "$panel_fifo" &

get_active_window > "$panel_fifo" &

# time
while :; do
  echo "C$(date +'%a %_I:%M%p')"
  sleep 1
done > "$panel_fifo" &

# volume
pactl subscribe | grep --line-buffered 'sink' | while read _; do
  get_volume
done > "$panel_fifo" &

get_volume > "$panel_fifo" &

# user
while :; do
  echo "U$(whoami)"
  sleep 10
done > "$panel_fifo" &

# available updates
while :; do
  echo "P$(checkupdates | wc -l)"
  sleep 5m
done > "$panel_fifo" &

# vpn
inotifywait -qm -e close_write --format '%w' "$(vpn-connect -f)" | while read _; do
  get_vpn_status
done > "$panel_fifo" &

get_vpn_status > "$panel_fifo" &

"$dir"/parser < "$panel_fifo" | lemonbar \
    -d \
    -n "$panel_name" \
    -g "$geometry" \
    -o "$font_offset" \
    -f "$font1" \
    -o "$font_offset" \
    -f "$font2" \
    -o "$font_offset" \
    -f "$icon1" \
    -o 0 \
    -f "$icon2" \
    -u "$border" \
    -B "$bg_color" \
    -F "$fg_color" \
  | zsh &

# store PID for kill command
echo $$ > "$panel_pid_file"

until bar_id=$(xdo id -a "$panel_name"); do
  sleep 0.001
done

# hide bar on fullscreen
xdo below -t "$(xdo id -n root)" "$bar_id"

wait

